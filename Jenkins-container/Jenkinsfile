pipeline{
      agent any
      tools{
        jdk 'jdk17'
        nodejs 'node16'
      }

      environment {
        SCANNER_HOME = tool 'sonar-scanner'
      }
    stages{
        stage("Git Clone"){
            steps{
            git credentialsId: 'b9422ee1-b395-447d-b478-a08f3aee80c4', url: 'https://github.com/udubey25/DevSecOps-Project.git', branch: 'main'
        }
        }
        stage("Sonarqube Analysis "){
            steps{
                withSonarQubeEnv('sonar-server') {
                    sh '${SCANNER_HOME}/bin/sonar-scanner -Dsonar.projectName=Netflix -Dsonar.projectKey=Netflix'
                }
        }
        }
        stage("quality gate"){
            steps{
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token' 
            } 
        }
        }
        stage("Build Docker Image"){
            steps{
            withCredentials([string(credentialsId: 'TMDB_API_KEY', variable: 'TMDB_API_KEY')]){
                sh "docker build --build-arg TMDB_V3_API_KEY='$TMDB_API_KEY' -t netflix ."
            }
        }
        }
        stage("Pushing Docker image to docker hub"){
            steps{
            withCredentials([usernamePassword(credentialsId: 'dockerhub-login', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){
                sh "docker login -u '$USERNAME' -p '$PASSWORD'"
                sh "docker tag netflix udubey25/netflix:v2"
                sh "docker push udubey25/netflix:v2"            
            }
            }
        }
        stage("Deploying the App on Cluster"){
            steps{
                sh "kubectl apply -f Kubernetes/deployment.yml"
            }
        }

        }
        }